---
title: "Class 07: Machine Learning"
author: "Jessica Diaz-Vigil"
date: 2023-04-26
format: pdf
---

# Example of K-means clustering

First step is to make up some data with a known structure, so we know the answer it should be

```{r}
tmp <- c(rnorm(30, mean = -3), rnorm(30, mean = 3))
tmp
x <- cbind( x = tmp, y= rev(tmp) )
x
```

```{r}
plot(tmp)
plot(x)
```

Now we have some structured data in `x`. Let's see if the k-means is able to identify the two groups.

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

Let's explore `k`:

```{r}
k$cluster
```

```{r}
k$centers
```

```{r}
k$totss
```

```{r}
k$withinss
```

```{r}
k$tot.withinss
```

```{r}
k$betweenss
```

```{r}
k$size
```

```{r}
k$iter
```

```{r}
k$ifault
```

We can color the data points of what `k` gave us:

```{r}
plot(x, col = k$cluster)
```

Now we can add the cluster centers:

```{r}
plot(x, col = k$cluster)
points(k$centers, col = 'pink', pch = 15)
```

# Example of Hierarchical Clustering

Let's use the same data as before, which we stored in `a`. We will use the `hclust()` function.

First we must look at `dist()` since it is required for `hclust()`.

```{r}
dist(x)
```

Now we can put the distance into `hclust()`.

```{r}
clustering <- hclust(dist(x))
clustering
```

We can now plot `clustering` to get a dendrogram:

```{r}
plot(clustering)
```

Let's add an horizontal line:

```{r}
plot(clustering)
abline(h = 10, col = 'pink')
```

To get our results (i.e., membership vector), we need to 'cut' the tree. The function for doing that is `cutree`.

```{r}
subgroups <- cutree(clustering, h = 10)
subgroups
```

Plotting this:

```{r}
plot(x, col = subgroups)
```

You can also 'cut' your tree with the number of clusters you want:

```{r}
cutree(clustering, k = 2)
```

# PCA of UK Food Data

First we will look at the PCA of the UK Food Data

```{r}
url <- "https://tinyurl.com/UK-foods"
j <- read.csv(url)
j
```

```{r}
url <- "https://tinyurl.com/UK-foods"
j <- read.csv(url, row.names = 1)
j
```

```{r}
dim(j)
```

Now we can generate some basic visualizations.

```{r}
barplot(as.matrix(j), col = rainbow(nrow(j)))
```

```{r}
barplot(as.matrix(j), beside=T, col=rainbow(nrow(j)))
```

Other visualizations we can do:

```{r}
pairs(j, col=rainbow(10), pch=16)
```

Let's apply PCA (principal components analysis). For that, we need to use the command `prcomp()`. This function expects the transpose of our data.

```{r}
t(j)
pca <- prcomp(t(j))
```

```{r}
pca <- prcomp(t(j))
summary(pca)
```

Let's plot the PCA results.

```{r}
plot(pca)
```

We need to access the results of the PCA analysis.

```{r}
pca$sdev
pca$center
pca$scale
pca$rotation
pca$x
```

```{r}
attributes(pca)
```

We can explore the `pca$x` dataframe:

```{r}
pca$x
```

Plotting:

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
```

We don't know which country is which, so we need to add labels:

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
text(x = pca$x[,1], y = pca$x[,2], colnames(j))
```

Let's add some color!

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
colors_countries <- c('orange', 'pink', 'blue', 'green')
text(x = pca$x[,1], y = pca$x[,2], colnames(j), col = colors_countries)
```

# PCA of RNA Seq Data

Now, we will look at the PCA of RNA seq data

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

blah

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

Let's apply PCA:

```{r}
pca_rna <- prcomp (t(rna.data))
summary (pca_rna)
```

Let's plot

```{r}
plot(pca_rna$x[,1], pca_rna$x[,2], xlab = "PC1", ylab = "PC2")
```

```{r}
cols_samples <- c(rep('pink', 5), rep('hotpink', 5))
cols_samples
```

```{r}
plot(pca_rna$x[,1], pca_rna$x[,2], xlab = "PC1", ylab = "PC2", col = cols_samples)
```

# Questions

**Q1**. How many rows and columns are in your new data frame named `j`? What R functions could you use to answer this questions?

```{r}
dim(j)
```

**Q2.** Which approach to solving the 'row-names problem' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

```{r}
url <- "https://tinyurl.com/UK-foods"
j <- read.csv(url, row.names = 1)
j
```

**Q3**: Changing what optional argument in the above **barplot()**function results in the following plot?

```{r}
barplot(as.matrix(j), col = rainbow(nrow(j)))
```

**Q5**: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(j, col=rainbow(10), pch=16)
```

**Q6**. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

```{r}
pca <- prcomp( t(j) )
summary(pca)
```

**Q7**. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
text(x = pca$x[,1], y = pca$x[,2], colnames(j))
```

**Q8.** Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(x = pca$x[,1], y = pca$x[,2])
colors_countries <- c('orange', 'pink', 'blue', 'green')
text(x = pca$x[,1], y = pca$x[,2], colnames(j), col = colors_countries)
```

**Q9**: Generate a similar 'loadings plot' for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2)
```

**Q10**: How many genes and samples are in this data set?

```{r}
dim(rna.data)
```

I have 100 genes, and 10 samples.
